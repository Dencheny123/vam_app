# Монолитный Dockerfile для запуска клиента и сервера в одном контейнере
FROM node:24-alpine AS client-builder
WORKDIR /app/client
COPY client/package*.json ./
RUN npm ci --only=production --frozen-lockfile
COPY client/ ./
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_UPLOADS_URL
ARG NEXT_PUBLIC_URL
RUN echo "NODE_ENV=production" > .env \
    && echo "NEXT_PUBLIC_API_URL=https://stroyka-client-production.up.railway.app/api" >> .env \
    && echo "NEXT_PUBLIC_UPLOADS_URL=https://stroyka-client-production.up.railway.app/uploads" >> .env \
    && echo "NEXT_PUBLIC_URL=https://stroyka-client-production.up.railway.app" >> .env \
    && echo "NEXT_PUBLIC_DOCKER_API_URL=https://stroyka-client-production.up.railway.app/api" >> .env \
    && echo "NEXT_PUBLIC_DOCKER_UPLOADS_URL=https://stroyka-client-production.up.railway.app/uploads" >> .env \
    && echo "NEXT_PUBLIC_DOCKER_URL=https://stroyka-client-production.up.railway.app" >> .env \
    && echo "NEXT_PUBLIC_METADATA_URL=http://localhost:3001" >> .env
RUN npm run build

FROM node:24-alpine AS server-builder
WORKDIR /app/server
COPY server/package*.json ./
RUN npm ci --only=production --frozen-lockfile
COPY server/ ./
ARG DATABASE_URL
ARG SMTP_PASS
ARG SMTP_USER
ARG SMTP_FROM
ARG SMTP_ADMIN
RUN echo "NODE_ENV=production" > .env \
    && echo "DATABASE_URL=mysql://u1770310_admin:Chernichkin_123@31.31.198.5:3310/u1770310_Denis_Condicioner" >> .env \
    && echo "PORT=3001" >> .env \
    && echo "ACCESS_TOKEN_SECRET=asdgagdgagadggewqghqhfhfhqahq" >> .env \
    && echo "REFRESH_TOKEN_SECRET=asdgagrweqhqchqfhfhqerfqfhqdh" >> .env \
    && echo "CLIENT_URL=http://localhost:4000" >> .env \
    && echo "SMTP_PASS=AYajNgOYFQ9f5gP4JriV" >> .env \
    && echo "SMTP_USER=madewlove@mail.ru" >> .env \
    && echo "SMTP_FROM=madewlove@mail.ru" >> .env \
    && echo "SMTP_ADMIN=juniorletto03092001@gmail.com" >> .env
RUN npm install -g prisma
RUN npx prisma generate
# Убедимся что Prisma клиент доступен в node_modules
RUN npm install @prisma/client
RUN npm install typescript --no-save && npx tsc


FROM node:24-alpine
WORKDIR /app

# Устанавливаем Nginx
RUN apk add --no-cache nginx

# Копируем клиент
COPY --from=client-builder /app/client/.next ./.next
COPY --from=client-builder /app/client/node_modules ./node_modules
COPY --from=client-builder /app/client/package.json ./package.json
COPY --from=client-builder /app/client/public ./public
COPY --from=client-builder /app/client/.env ./.env

# Копируем сервер
COPY --from=server-builder /app/server/dist ./server/dist
COPY --from=server-builder /app/server/node_modules ./server/node_modules
COPY --from=server-builder /app/server/package.json ./server/package.json
COPY --from=server-builder /app/server/public ./server/public
COPY --from=server-builder /app/server/.env ./server/.env
# Копируем сгенерированные Prisma файлы
COPY --from=server-builder /app/server/node_modules/.prisma ./server/node_modules/.prisma

# Копируем конфигурацию Nginx
COPY nginx.monolith.conf /etc/nginx/nginx.conf

# Копируем скрипт запуска
COPY start.sh ./start.sh
RUN chmod +x ./start.sh

EXPOSE 80

CMD ["./start.sh"]